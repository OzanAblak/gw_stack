name: gw-ci
on: [push, workflow_dispatch]
jobs:
  ttl410:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: deps
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: start stack
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build
          docker compose ps

      - name: wait health (diagnostic)
        run: |
          GW_PORT=18088
          PL_PORT=19090
          echo "GW_PORT=$GW_PORT PL_PORT=$PL_PORT"
          for i in {1..90}; do
            echo "TRY #$i"
            GW=$(curl -sS -o /dev/null -w "%{http_code}" "http://localhost:$GW_PORT/health" || echo ERR)
            PL=$(curl -sS -o /dev/null -w "%{http_code}" "http://localhost:$PL_PORT/health" || echo ERR)
            echo "GW=$GW PL=$PL"
            if [ "$GW" = "200" ] && [ "$PL" = "200" ]; then exit 0; fi
            sleep 2
          done
          echo "::group::compose ps"; docker compose ps; echo "::endgroup::"
          echo "::group::host ports"; ss -ltn; echo "::endgroup::"
          echo "::group::gateway logs"; docker compose logs gateway | tail -n 200; echo "::endgroup::"
          echo "::group::planner logs"; docker compose logs planner | tail -n 200; echo "::endgroup::"
          echo "::group::planner in-container /health via python"; 
          PL=$(docker ps -qf "name=planner"); 
          docker exec "$PL" python - <<'PY' || true
import urllib.request, sys
try:
    with urllib.request.urlopen("http://localhost:9090/health", timeout=5) as r:
        print("planner_in_container_status", r.status)
except Exception as e:
    print("planner_in_container_error", e)
PY
          echo "::endgroup::"
          exit 1

      - name: stop early on failure
        if: ${{ failure() }}
        run: echo "wait health failed; see grouped logs above" && exit 1

      - name: compile
        run: |
          PLANID=$(curl -fsS -X POST http://localhost:18088/v1/plan/compile -H "Content-Type: application/json" -d '{}' | jq -r .planId)
          echo "PLANID=$PLANID" >> $GITHUB_ENV

      - name: assert 200
        run: |
          curl -fsS -o resp.json -w "%{http_code}\n" http://localhost:18088/v1/plan/$PLANID | tee code.txt | grep -q '^200$'

      - name: wait ttl
        run: sleep 70

      - name: assert 410
        run: |
          curl -fsS -o resp_ttl.json -w "%{http_code}\n" http://localhost:18088/v1/plan/$PLANID | tee code_ttl.txt | grep -q '^410$'
